/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practicascrum;

import Clases.Transaccion;
import Clases.TransaccionCE;
import Clases.TransaccionEESE;
import Clases.TransaccionFLIFLE;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Laura
 */
public class CalculoPFNA extends javax.swing.JFrame {

    DefaultTableModel dtm;

    static int EE_S = 0;
    static int EE_M = 0;
    static int EE_C = 0;
    static int SE_S = 0;
    static int SE_M = 0;
    static int SE_C = 0;
    static int FLI_S = 0;
    static int FLI_M = 0;
    static int FLI_C = 0;
    static int FLE_S = 0;
    static int FLE_M = 0;
    static int FLE_C = 0;
    static int CE_S = 0;
    static int CE_M = 0;
    static int CE_C = 0;

    static int CE = 0;
    static int FLE = 0;
    static int FLI = 0;
    static int SE = 0;
    static int EE = 0;
    
    /**
     * Creates new form CalculoPFNA
     */
    public CalculoPFNA() {
        initComponents();
        this.setTitle("Cálculo Punto Función");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(688, 394));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("PFNA");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Descripción", "Sencilla", "Media", "Compleja", "TOTAL P.F."
            }
        ));
        jTable1.setRowHeight(30);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(270);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(270);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(270);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(314, 314, 314))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculoPFNA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculoPFNA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculoPFNA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculoPFNA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculoPFNA().setVisible(true);
            }
        });
    }
    
    public static Integer calculaPFNA(){
        EE_S = 0;
        EE_M = 0;
        EE_C = 0;
        SE_S = 0;
        SE_M = 0;
        SE_C = 0;
        FLI_S = 0;
        FLI_M = 0;
        FLI_C = 0;
        FLE_S = 0;
        FLE_M = 0;
        FLE_C = 0;
        CE_S = 0;
        CE_M = 0;
        CE_C = 0;

        CE = 0;
        FLE = 0;
        FLI = 0;
        SE = 0;
        EE = 0;
               
        for (int i = 0; i < MainFrame.transacciones.size(); i++) {
            Transaccion t = MainFrame.transacciones.get(i);

            if (t.getTipo().equals("FLI")) {
                TransaccionFLIFLE aux = (TransaccionFLIFLE) t;
                if (MostrarComplejidad.calculaComplejidad(aux).equals("Sencilla")) {
                    FLI_S++;
                } else if (MostrarComplejidad.calculaComplejidad(aux).equals("Media")) {
                    FLI_M++;
                } else {
                    FLI_C++;
                }
            } else if (t.getTipo().equals("FLE")) {
                TransaccionFLIFLE aux = (TransaccionFLIFLE) t;
                if (MostrarComplejidad.calculaComplejidad(aux).equals("Sencilla")) {
                    FLE_S++;
                } else if (MostrarComplejidad.calculaComplejidad(aux).equals("Media")) {
                    FLE_M++;
                } else {
                    FLE_C++;
                }
            } else if (t.getTipo().equals("EE")) {
                TransaccionEESE aux = (TransaccionEESE) t;
                if (MostrarComplejidad.calculaComplejidad(aux).equals("Sencilla")) {
                    EE_S++;
                } else if (MostrarComplejidad.calculaComplejidad(aux).equals("Media")) {
                    EE_M++;
                } else {
                    EE_C++;
                }
            } else if (t.getTipo().equals("SE")) {
                TransaccionEESE aux = (TransaccionEESE) t;
                if (MostrarComplejidad.calculaComplejidad(aux).equals("Sencilla")) {
                    SE_S++;
                } else if (MostrarComplejidad.calculaComplejidad(aux).equals("Media")) {
                    SE_M++;
                } else {
                    SE_C++;
                }
            } else if (t.getTipo().equals("CE")) {
                TransaccionCE aux = (TransaccionCE) t;
                if (MostrarComplejidad.calculaComplejidad(aux).equals("Sencilla")) {
                    CE_S++;
                } else if (MostrarComplejidad.calculaComplejidad(aux).equals("Media")) {
                    CE_M++;
                } else {
                    CE_C++;
                }
            }
        }
        CE = CE_S * 3 + CE_M * 4 + CE_C * 6;
        FLE = FLE_S * 5 + FLE_M * 7 + FLE_C * 10;
        FLI = FLI_S * 7 + FLI_M * 10 + FLI_C * 15;
        SE = SE_S * 4 + SE_M * 5 + SE_C * 7;
        EE = EE_S * 3 + EE_M * 4 + EE_C * 6;
        
        return (EE + SE + FLI + FLE + CE);
    }

    public void muestraPFNA() {
        dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);

        //CALCULO DE LAS TABLAS AHORA
        
        dtm.addRow(new Object[]{"Nº de Entradas Externas", EE_S + "  x3", EE_M + "  x4", EE_C + "  x6", EE});

        
        dtm.addRow(new Object[]{"Nº de Salidas Externas", SE_S + "  x4", SE_M + "  x5", SE_C + "  x7", SE});

        
        dtm.addRow(new Object[]{"Nº Grupo Lógicos de Datos Internos", FLI_S + "  x7", FLI_M + "  x10", FLI_C + "  x15", FLI});

        
        dtm.addRow(new Object[]{"Nº Grupo Lógicos de Datos de Interfaz", FLE_S + "  x5", FLE_M + "  x7", FLE_C + "  x10", FLE});

        dtm.addRow(new Object[]{"Nº de Consultas Externas", CE_S + "  x3", CE_M + "  x4", CE_C + "  x6", CE});

        dtm.addRow(new Object[]{"TOTAL PFNA", "", "", "", MainFrame.PFNA});
       

        DefaultTableCellRenderer tcr = new DefaultTableCellRenderer();
        tcr.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(tcr);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
